# Copied and adapted from gtest/googletest/make/Makefile
# Edit only the targets in the end, adding targets to the .o's
# and dependencies to them to "all_tests"

###################################################################
###################################################################
###################################################################




# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest/googletest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++17 -fprofile-arcs -ftest-coverage -lgcov

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : test_all .gitignore

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# Tests all tests automagically

TESTS = $(basename $(wildcard **/*.cpp *.cpp))

.PHONY: .gitignore clean matching
clean:
	rm -f $(TESTS) gtest.a gtest_main.a **/*.o *.o
	rm -f *.gcov *.gcda *.gcno *.o *.a

.SECONDEXPANSION:
PERCENT=%

$(TESTS) : % : %.cpp gtest_main.a ../code/$$(basename %).cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $< gtest_main.a -o $@

test_all: $(addsuffix .test, $(TESTS))

.gitignore:
	@echo "${TESTS}" | sed -e 's/ /\n/g' >$@

$(addsuffix .test, $(TESTS)) : % : $$(basename %)
	./$< --gtest_color=yes

MATCHING_TESTS = $(basename $(wildcard min-cost-matching/*.cpp))
MATCHING_LIBS = $(basename $(wildcard min-cost-matching/*.h))
matching: $(addsuffix .test, $(MATCHING_TESTS) $(MATCHING_LIBS)) 